# -*- coding: utf-8 -*-
"""kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/
"""

#from google.colab import drive
#drive.mount('/content/drive')

# %cd drive/My\ Drive/ML\ Mini\ Project
#!pwd

"""
Machine Learning Mini Project
K Means
Image Compression
"""
import scipy.io
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
from skimage import io

def findClosestCentroids(X, centroids):
    
    m = X.shape[0]
    idx = np.zeros((m,1))
    
    temp = np.zeros((centroids.shape[0],1))
    K = centroids.shape[0]
    
    for i in range(m):
        for j in range(K):
            dist = X[i,:] - centroids[j,:]
            length = np.sum(dist**2)
            temp[j] = length
            
        idx[i] = np.argmin(temp)+1
        
    return idx



def computeCentroids(X, idx, K):

    m, n = X.shape[0],X.shape[1]
    centroids = np.zeros((K,n))
    count = np.zeros((K,1))
    
    for i in range(m):
        index = int((idx[i]-1)[0])
        centroids[index,:]+=X[i,:]
        count[index]+=1
    
    return centroids/count

def plotKmeans(X, centroids, idx, K, num_iters):

    m,n = X.shape[0],X.shape[1]
    
    fig, ax = plt.subplots(nrows=num_iters,ncols=1,figsize=(6,35))
    
    for i in range(num_iters):    
        color = "ygbm"
        for k in range(1,K+1):
            grp = (idx==k).reshape(m,1)
            ax[i].scatter(X[grp[:,0],0],X[grp[:,0],1],c=color[k-1],s=15)


        ax[i].scatter(centroids[:,0],centroids[:,1],s=120,marker="D",c="black",linewidth=3)
        title = "Iteration Number " + str(i)
        ax[i].set_title(title)
        

        centroids = computeCentroids(X, idx, K)
        
  
        idx = findClosestCentroids(X, centroids)
    
    plt.tight_layout()



def kMeansInitCentroids(X, K):
 
    m,n = X.shape[0], X.shape[1]
    centroids = np.zeros((K,n))
    
    for i in range(K):
        centroids[i] = X[np.random.randint(0,m+1),:]
        
    return centroids


#A = mat2["A"]

# preprocess and reshape the image


def runKmeans(X, initial_centroids,num_iters,K):
    
    idx = findClosestCentroids(X, initial_centroids)
    
    for i in range(num_iters):
        

        centroids = computeCentroids(X, idx, K)

        idx = findClosestCentroids(X, initial_centroids)

    return centroids, idx
  
################################################################
########   End of functions    #################################
################################################################

mat = scipy.io.loadmat('ex7data2.mat')
X = mat["X"]

K = 4

#num_iters = 10
initial_centroids = np.array([[3,3],[6,2],[8,5],[4,0]])
idx = findClosestCentroids(X, initial_centroids)
# print("Few examples:\n",idx[0:3])  
  

centroids = computeCentroids(X, idx, K)
print("Initially:\n", centroids)


m,n = X.shape[0],X.shape[1]
plotKmeans(X, initial_centroids,idx, K,10)

centroids = kMeansInitCentroids(X, K)
idx = findClosestCentroids(X, centroids)
plotKmeans(X, centroids,idx, K,10)



#####################################################################################
#########   Second Section of the program. Perform image compression  ###################
####################################################################################


image = io.imread('bird_small.png')
#image = io.imread('earth.png') Takes long time

#image = Image.open('earth.png')

# convert image to numpy array
#mat2 = np.asarray(image)

X2 = (image/255).reshape(image.shape[0]*image.shape[1],image.shape[2])
K2 = 16
num_iters = 10
initial_centroids2 = kMeansInitCentroids(X2, K2)
centroids2, idx2 = runKmeans(X2, initial_centroids2, num_iters,K2)

m2,n2 = X.shape[0],X.shape[1]
X2_recovered = X2.copy()
for i in range(1,K2+1):
    X2_recovered[(idx2==i).ravel(),:] = centroids2[i-1]


X2_recovered = X2_recovered.reshape(128,128,3)


fig, ax = plt.subplots(1,2)
ax[0].imshow(X2.reshape(128,128,3))
ax[1].imshow(X2_recovered)
